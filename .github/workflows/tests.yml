name: Tests

on:
  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#push
  push:
    branches:
      - main
      - feature/**
      - '[0-9].*.x'  # e.g., 4.14.x
      - '[0-9][0-9].*.x'  # e.g., 23.3.x

  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
  pull_request:

  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_dispatch
  workflow_dispatch:

  # no payload
  schedule:
      # https://crontab.guru/#37_18_*_*_*
    - cron: 37 18 * * *

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  # https://conda.github.io/conda-libmamba-solver/user-guide/configuration/#advanced-options
  CONDA_LIBMAMBA_SOLVER_NO_CHANNELS_FROM_INSTALLED: true

jobs:
  # detect whether any code changes are included in this PR
  changes:
    runs-on: ubuntu-latest
    permissions:
      # necessary to detect changes
      # https://github.com/dorny/paths-filter#supported-workflows
      pull-requests: read
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - name: Checkout Source
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        # dorny/paths-filter needs git clone for non-PR events
        # https://github.com/dorny/paths-filter#supported-workflows
        if: github.event_name != 'pull_request'

      - name: Filter Changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          filters: |
            code:
              - 'conda/**'
              - 'conda_env/**'
              - 'tests/**'
              - '*.py'
              - 'recipe/**'
              - '.github/workflows/tests.yml'

  # windows test suite
  windows:
    # only run test suite if there are code changes
    needs: changes
    if: github.event_name == 'schedule' || needs.changes.outputs.code == 'true'

    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        # test lower version (w/ defaults) and upper version (w/ defaults and conda-forge)
        python-version: ['3.10', '3.13']
        default-channel: [defaults, conda-forge]
        test-type: [unit, integration]
        test-group: [1, 2, 3]
        exclude:
          - default-channel: conda-forge
            python-version: '3.10'
          - test-type: unit
            test-group: 3
    env:
      ErrorActionPreference: Stop  # powershell exit immediately on error
      PYTEST_MARKER: ${{ matrix.test-type == 'unit' && 'not integration' || 'integration' }}
      PYTEST_SPLITS: ${{ matrix.test-type == 'unit' && '2' || '3' }}
      CONDA_TEST_SOLVERS: ${{ github.event_name == 'pull_request' && 'libmamba' || 'libmamba,classic' }}

    steps:
      - name: Checkout Source
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Hash + Timestamp
        shell: bash  # use bash to run date command
        run: echo "HASH=${{ runner.os }}-${{ runner.arch }}-Py${{ matrix.python-version }}-${{ matrix.default-channel }}-${{ matrix.test-type }}-${{ matrix.test-group }}-$(date -u "+%Y%m")" >> $GITHUB_ENV

      - name: Cache Conda
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          # Use faster GNU tar for all runners
          enableCrossOsArchive: true
          path: D:\conda_pkgs_dir
          key: cache-${{ env.HASH }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          condarc-file: .github\condarc-${{ matrix.default-channel }}
          run-post: false  # skip post cleanup
          pkgs-dirs: D:\conda_pkgs_dir
          installation-dir: D:\conda

      - name: Conda Install
        run: >
          conda install
          --yes
          --file tests\requirements.txt
          --file tests\requirements-${{ runner.os }}.txt
          --file tests\requirements-ci.txt
          --file tests\requirements-s3.txt
          --file tests\requirements-truststore.txt
          python=${{ matrix.python-version }}

      - name: Conda Info
        # view test env info (not base)
        run: python -m conda info --verbose

      - name: Conda Config
        run: conda config --show-sources

      - name: Conda List
        run: conda list --show-channel-urls

      - name: Setup PowerShell
        # for tests/shell, so only necessary for integration tests
        if: matrix.test-type == 'integration'
        run: |
          $PWSH_STABLE = "$env:LOCALAPPDATA\Microsoft\powershell"
          Invoke-Expression "& { $(Invoke-RestMethod https://aka.ms/install-powershell.ps1) } -Destination `"$PWSH_STABLE`""
          $PWSH_PREVIEW = "$env:LOCALAPPDATA\Microsoft\powershell-preview"
          Invoke-Expression "& { $(Invoke-RestMethod https://aka.ms/install-powershell.ps1) } -Preview -Destination `"$PWSH_PREVIEW`""
          "PWSHPATH=$PWSH_STABLE;$PWSH_PREVIEW" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: PowerShell Info
        # for tests/shell, so only necessary for integration tests
        if: matrix.test-type == 'integration'
        run: |
          Get-Command -All powershell
          "$env:PWSHPATH" -split ";" | ForEach-Object { Get-Command -All "$_\pwsh" }

      - name: Run Tests
        # Windows is sensitive to long paths, using `--basetemp=${{ runner.temp }} to
        # keep the test directories shorter
        run: >
          python -m pytest
          --cov=conda
          --basetemp=${{ runner.temp }}
          --durations-path=durations\${{ runner.os }}.json
          --group=${{ matrix.test-group }}
          --splits=${{ env.PYTEST_SPLITS }}
          -m "${{ env.PYTEST_MARKER }}"

      - name: Upload Coverage
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          flags: ${{ runner.os }},${{ runner.arch }},${{ matrix.python-version }},${{ matrix.test-type }}
          token: ${{ secrets.CODECOV_TOKEN }}  # required

      - name: Upload Test Results
        if: '!cancelled()'
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: test-results-${{ env.HASH }}
          include-hidden-files: true
          path: |
            .coverage
            durations\${{ runner.os }}.json
            test-report.xml
          retention-days: 1  # temporary, combined in aggregate below

  # linux test suite
  linux:
    # only run test suite if there are code changes
    needs: changes
    if: github.event_name == 'schedule' || needs.changes.outputs.code == 'true'

    runs-on: ${{ matrix.runs-on }}
    defaults:
      run:
        # https://github.com/conda-incubator/setup-miniconda#use-a-default-shell
        shell: bash -el {0}  # bash exit immediately on error + login shell
    strategy:
      fail-fast: false
      matrix:
        # test all lower versions (w/ defaults) and upper version (w/ defaults and conda-forge)
        runs-on:
          - ubuntu-latest  # linux-64
          - ubuntu-24.04-arm  # linux-aarch64
        python-version: ['3.10', '3.11', '3.12', '3.13']
        default-channel: [defaults, conda-forge]
        test-type: [unit, integration]
        test-group: [1, 2, 3]
        exclude:
          - python-version: '3.10'
            default-channel: conda-forge
          - python-version: '3.11'
            default-channel: conda-forge
          - python-version: '3.12'
            default-channel: conda-forge
          - test-type: unit
            test-group: 3
          - runs-on: ubuntu-24.04-arm
            python-version: '3.10'
          - runs-on: ubuntu-24.04-arm
            python-version: '3.11'
          - runs-on: ubuntu-24.04-arm
            python-version: '3.12'
    env:
      PYTEST_MARKER: ${{ matrix.test-type == 'unit' && 'not integration' || 'integration' }}
      PYTEST_SPLITS: ${{ matrix.test-type == 'unit' && '2' || '3' }}
      CONDA_TEST_SOLVERS: ${{ github.event_name == 'pull_request' && ( matrix.python-version != '3.13' || matrix.default-channel == 'conda-forge' ) && 'libmamba' || 'libmamba,classic' }}

    steps:
      - name: Checkout Source
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Hash + Timestamp
        run: echo "HASH=${{ runner.os }}-${{ runner.arch }}-Py${{ matrix.python-version }}-${{ matrix.default-channel }}-${{ matrix.test-type }}-${{ matrix.test-group }}-$(date -u "+%Y%m")" >> $GITHUB_ENV

      - name: Cache Conda
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/conda_pkgs_dir
          key: cache-${{ env.HASH }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          condarc-file: .github/condarc-${{ matrix.default-channel }}
          run-post: false  # skip post cleanup
          miniconda-version: ${{ matrix.default-channel == 'defaults' && 'latest' || null }}
          miniforge-version: ${{ matrix.default-channel == 'conda-forge' && 'latest' || null }}

      - name: Conda Install
        run: >
          conda install
          --yes
          --file tests/requirements.txt
          --file tests/requirements-${{ runner.os }}.txt
          --file tests/requirements-ci.txt
          --file tests/requirements-s3.txt
          --file tests/requirements-truststore.txt
          python=${{ matrix.python-version }}

      - name: Conda Info
        # view test env info (not base)
        run: python -m conda info --verbose

      - name: Conda Config
        run: conda config --show-sources

      - name: Conda List
        run: conda list --show-channel-urls

      - name: Setup Shells
        # for tests/shell, so only necessary for integration tests
        if: matrix.test-type == 'integration'
        run: sudo apt update && sudo apt install ash csh fish tcsh xonsh zsh

      - name: Run Tests
        run: >
          python -m pytest
          --cov=conda
          --durations-path=durations/${{ runner.os }}.json
          --group=${{ matrix.test-group }}
          --splits=${{ env.PYTEST_SPLITS }}
          -m "${{ env.PYTEST_MARKER }}"

      - name: Upload Coverage
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          flags: ${{ runner.os }},${{ runner.arch }},${{ matrix.python-version }},${{ matrix.test-type }}
          token: ${{ secrets.CODECOV_TOKEN }}  # required

      - name: Upload Test Results
        if: '!cancelled()'
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: test-results-${{ env.HASH }}
          include-hidden-files: true
          path: |
            .coverage
            durations/${{ runner.os }}.json
            test-report.xml
          retention-days: 1  # temporary, combined in aggregate below

  # linux benchmarks
  linux-benchmarks:
    # only run test suite if there are code changes
    needs: changes
    if: needs.changes.outputs.code == 'true'

    runs-on: ubuntu-22.04
    defaults:
      run:
        # https://github.com/conda-incubator/setup-miniconda#use-a-default-shell
        shell: bash -el {0}  # bash exit immediately on error + login shell
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.13']

    steps:
      - name: Checkout Source
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Hash + Timestamp
        run: echo "HASH=${{ runner.os }}-${{ runner.arch }}-Py${{ matrix.python-version }}-benchmark-$(date -u "+%Y%m")" >> $GITHUB_ENV

      - name: Cache Conda
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/conda_pkgs_dir
          key: cache-${{ env.HASH }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          condarc-file: .github/condarc-defaults
          run-post: false  # skip post cleanup

      - name: Conda Install
        run: >
          conda install
          --yes
          --file tests/requirements.txt
          --file tests/requirements-${{ runner.os }}.txt
          --file tests/requirements-ci.txt
          --file tests/requirements-s3.txt
          --file tests/requirements-benchmarks.txt
          --file tests/requirements-truststore.txt
          python=${{ matrix.python-version }}

      - name: Conda Info
        # view test env info (not base)
        run: python -m conda info --verbose

      - name: Conda Config
        run: conda config --show-sources

      - name: Conda List
        run: conda list --show-channel-urls

      - name: Run Benchmarks
        uses: CodSpeedHQ/action@4348f634fa7309fe23aac9502e88b999ec90a164 # v4.3.1
        with:
          token: ${{ secrets.CODSPEED_TOKEN }}
          run: $CONDA/envs/test/bin/python -m pytest --codspeed
          mode: instrumentation

  # linux typing
  linux-typing:
    # only run test suite if there are code changes
    needs: changes
    if: needs.changes.outputs.code == 'true'

    runs-on: ubuntu-22.04
    defaults:
      run:
        # https://github.com/conda-incubator/setup-miniconda#use-a-default-shell
        shell: bash -el {0}  # bash exit immediately on error + login shell
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.13']

    steps:
      - name: Checkout Source
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Hash + Timestamp
        run: echo "HASH=${{ runner.os }}-${{ runner.arch }}-Py${{ matrix.python-version }}-benchmark-$(date -u "+%Y%m")" >> $GITHUB_ENV

      - name: Cache Conda
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/conda_pkgs_dir
          key: cache-${{ env.HASH }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          condarc-file: .github/condarc-defaults
          run-post: false  # skip post cleanup

      - name: Conda Install
        run: >
          conda install
          --yes
          --file tests/requirements.txt
          --file tests/requirements-${{ runner.os }}.txt
          --file tests/requirements-ci.txt
          --file tests/requirements-s3.txt
          --file tests/requirements-typing.txt
          --file tests/requirements-truststore.txt
          python=${{ matrix.python-version }}

      - name: Conda Info
        # view test env info (not base)
        run: python -m conda info --verbose

      - name: Conda Config
        run: conda config --show-sources

      - name: Conda List
        run: conda list --show-channel-urls

      - name: Run mypy
        run: >
          mypy
          --cobertura-xml-report=.mypy_cache/coverage.xml
          --txt-report=.mypy_cache/report.txt
          --html-report=.mypy_cache/report.html
          || true

      - name: Upload Coverage
        if: '!cancelled()'
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          flags: ${{ runner.os }},${{ runner.arch }},${{ matrix.python-version }},MyPy
          token: ${{ secrets.CODECOV_TOKEN }}  # required
          files: .mypy_cache/coverage.xml

      - name: Upload Test Results
        if: '!cancelled()'
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: test-results-${{ env.HASH }}
          include-hidden-files: true
          path: |
            .coverage
            .mypy_cache/report.*
            .mypy_cache/coverage.xml
          retention-days: 1  # temporary, combined in aggregate below

  # linux-qemu test suite
  linux-qemu:
    # only run test suite if there are code changes
    needs: changes
    if: github.event_name == 'schedule' || needs.changes.outputs.code == 'true'

    # Run one single fast test per docker+qemu emulated linux platform to test that
    # test execution is possible there (container+tools+dependencies work). Can be
    # changed / extended to run specific tests in case there are platform related
    # things to test. Running more tests is time consuming due to emulation
    # (factor 2-10x slower).
    runs-on: ubuntu-latest
    defaults:
      run:
        # https://github.com/conda-incubator/setup-miniconda#use-a-default-shell
        shell: bash -el {0}  # bash exit immediately on error + login shell
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.13']
        image:
          - condaforge/miniforge3:latest
        platform: [ppc64le]

    steps:
      - name: Checkout Source
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          platforms: linux/${{ matrix.platform }}
          # TODO: remove once resolved upstream:
          # - https://github.com/tonistiigi/binfmt/issues/215
          # - https://github.com/tonistiigi/binfmt/issues/165
          image: tonistiigi/binfmt:qemu-v8.1.5

      - name: Run Tests
        run: >
          docker run
          --rm
          --volume ${PWD}:/opt/conda-src
          --workdir /opt/conda-src
          --platform linux/${{ matrix.platform }}
          ${{ matrix.image }}
          bash -lc
          ". /opt/conda/etc/profile.d/conda.sh
          && set -x
          && conda create
          --name test
          --yes
          --file tests/requirements.txt
          --file tests/requirements-${{ runner.os }}.txt
          --file tests/requirements-ci.txt
          python=${{ matrix.python-version }}
          && conda activate test
          && python -m conda info --verbose
          && conda config --show-sources
          && conda list --show-channel-urls
          && python -m pytest tests/test_api.py::test_DepsModifier_contract"

  # linux memray
  linux-memray:
    # only run test suite if there are code changes
    needs: changes
    if: needs.changes.outputs.code == 'true'

    runs-on: ubuntu-latest
    defaults:
      run:
        # https://github.com/conda-incubator/setup-miniconda#use-a-default-shell
        shell: bash -el {0}  # bash exit immediately on error + login shell
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.13']

    steps:
      - name: Checkout Source
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Hash + Timestamp
        run: echo "HASH=${{ runner.os }}-${{ runner.arch }}-Py${{ matrix.python-version }}-memray-$(date -u "+%Y%m")" >> $GITHUB_ENV

      - name: Cache Conda
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/conda_pkgs_dir
          key: cache-${{ env.HASH }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          condarc-file: .github/condarc-defaults
          run-post: false  # skip post cleanup

      - name: Conda Install
        run: >
          conda install
          --yes
          --file tests/requirements.txt
          --file tests/requirements-${{ runner.os }}.txt
          --file tests/requirements-ci.txt
          --file tests/requirements-s3.txt
          --file tests/requirements-truststore.txt
          python=${{ matrix.python-version }}
          conda-forge::pytest-memray

      - name: Conda Info
        # view test env info (not base)
        run: python -m conda info --verbose

      - name: Conda Config
        run: conda config --show-sources

      - name: Conda List
        run: conda list --show-channel-urls

      - name: Run memray
        run: python -m pytest -k memray --memray

  # macos test suite
  macos:
    # only run test suite if there are code changes
    needs: changes
    if: github.event_name == 'schedule' || needs.changes.outputs.code == 'true'

    runs-on: ${{ matrix.runs-on }}
    defaults:
      run:
        # https://github.com/conda-incubator/setup-miniconda#use-a-default-shell
        shell: bash -el {0}  # bash exit immediately on error + login shell
    strategy:
      fail-fast: false
      matrix:
        # test lower version (w/ osx-64 & defaults & unit tests) and upper version (w/ osx-arm64 & defaults & integration tests)
        runs-on:
          - macos-15-intel  # osx-64
          - macos-latest  # osx-arm64
        python-version: ['3.10', '3.13']
        default-channel: [defaults, conda-forge]
        test-type: [unit, integration]
        test-group: [1, 2, 3]
        exclude:
          - runs-on: macos-15-intel
            python-version: '3.13'
          - runs-on: macos-15-intel
            default-channel: defaults
          - runs-on: macos-15-intel
            test-type: integration
          - runs-on: macos-latest
            python-version: '3.10'
          - runs-on: macos-latest
            default-channel: conda-forge
          - runs-on: macos-latest
            test-type: unit
          - test-type: unit
            test-group: 3
    env:
      PYTEST_MARKER: ${{ matrix.test-type == 'unit' && 'not integration' || 'integration' }}
      PYTEST_SPLITS: ${{ matrix.test-type == 'unit' && '2' || '3' }}
      CONDA_TEST_SOLVERS: ${{ github.event_name == 'pull_request' && 'libmamba' || 'libmamba,classic' }}

    steps:
      - name: Checkout Source
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Hash + Timestamp
        run: echo "HASH=${{ runner.os }}-${{ runner.arch }}-Py${{ matrix.python-version }}-${{ matrix.default-channel }}-${{ matrix.test-type }}-${{ matrix.test-group }}-$(date -u "+%Y%m")" >> $GITHUB_ENV

      - name: Cache Conda
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/conda_pkgs_dir
          key: cache-${{ env.HASH }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          condarc-file: .github/condarc-${{ matrix.default-channel }}
          run-post: false  # skip post cleanup
          miniconda-version: ${{ matrix.default-channel == 'defaults' && 'latest' || null }}
          miniforge-version: ${{ matrix.default-channel == 'conda-forge' && 'latest' || null }}

      - name: Conda Install
        run: >
          conda install
          --yes
          --file tests/requirements.txt
          --file tests/requirements-ci.txt
          --file tests/requirements-s3.txt
          --file tests/requirements-truststore.txt
          python=${{ matrix.python-version }}

      - name: Conda Info
        # view test env info (not base)
        run: python -m conda info --verbose

      - name: Conda Config
        run: conda config --show-sources

      - name: Conda List
        run: conda list --show-channel-urls

      - name: Setup Shells
        # for tests/shell, so only necessary for integration tests
        if: matrix.test-type == 'integration'
        run: brew update && brew install fish xonsh

      - name: Run Tests
        run: >
          python -m pytest
          --cov=conda
          --durations-path=durations/${{ runner.os }}.json
          --group=${{ matrix.test-group }}
          --splits=${{ env.PYTEST_SPLITS }}
          -m "${{ env.PYTEST_MARKER }}"

      - name: Upload Coverage
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          flags: ${{ runner.os }},${{ runner.arch }},${{ matrix.python-version }},${{ matrix.test-type }}
          token: ${{ secrets.CODECOV_TOKEN }}  # required

      - name: Upload Test Results
        if: '!cancelled()'
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: test-results-${{ env.HASH }}
          include-hidden-files: true
          path: |
            .coverage
            durations/${{ runner.os }}.json
            test-report.xml
          retention-days: 1  # temporary, combined in aggregate below

  # aggregate and upload
  aggregate:
    # only aggregate test suite if there are code changes
    needs: [changes, windows, linux, linux-benchmarks, linux-qemu, macos]
    if: >-
      !cancelled()
      && (
        github.event_name == 'schedule'
        || needs.changes.outputs.code == 'true'
      )

    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0

      - name: Upload Combined Test Results
        # provides one downloadable archive of all matrix run test results for further analysis
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: test-results-${{ github.sha }}-all
          include-hidden-files: true
          path: test-results-*
          retention-days: 7  # for durations.yml workflow

      - name: Test Summary
        uses: test-summary/action@31493c76ec9e7aa675f1585d3ed6f1da69269a86 # v2.4
        with:
          paths: test-results-*/test-report.xml

  # required check
  analyze:
    needs: [windows, linux, linux-qemu, linux-benchmarks, macos, aggregate]
    if: '!cancelled()'

    runs-on: ubuntu-latest
    steps:
      - name: Determine Success
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe # v1.2.2
        id: alls-green
        with:
          # permit jobs to be skipped if there are no code changes (see changes job)
          allowed-skips: ${{ toJSON(needs) }}
          jobs: ${{ toJSON(needs) }}

      - name: Checkout our source
        if: always() && github.event_name == 'schedule' && steps.alls-green.outputs.result == 'failure'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Report failures
        if: always() && github.event_name == 'schedule' && steps.alls-green.outputs.result == 'failure'
        uses: JasonEtco/create-an-issue@1b14a70e4d8dc185e5cc76d3bec9eab20257b2c5 # v2.9.2
        env:
          GITHUB_TOKEN: ${{ secrets.AUTO_REPORT_TEST_FAILURE }}
          RUN_ID: ${{ github.run_id }}
          TITLE: Tests failed
        with:
          filename: .github/TEST_FAILURE_REPORT_TEMPLATE.md
          update_existing: false

  # canary builds
  build:
    needs: [analyze]
    # only build canary build if
    # - prior steps succeeded,
    # - this is the main repo, and
    # - we are on the main, feature, or release branch
    if: >-
      !cancelled()
      && !github.event.repository.fork
      && (
        github.ref_name == 'main'
        || startsWith(github.ref_name, 'feature/')
        || endsWith(github.ref_name, '.x')
      )
    strategy:
      matrix:
        include:
          - runs-on: ubuntu-latest
            subdir: linux-64
          - runs-on: ubuntu-24.04-arm
            subdir: linux-aarch64
          - runs-on: macos-15-intel
            subdir: osx-64
          - runs-on: macos-latest
            subdir: osx-arm64
          - runs-on: windows-latest
            subdir: win-64
    runs-on: ${{ matrix.runs-on }}
    steps:
      # Clean checkout of specific git ref needed for package metadata version
      # which needs env vars GIT_DESCRIBE_TAG and GIT_BUILD_STR:
      - name: Checkout Source
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.ref }}
          clean: true
          fetch-depth: 0

      # Explicitly use Python 3.11 since each of the OSes has a different default Python
      - name: Setup Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.11'

      - name: Detect Label
        shell: python
        run: |
          import re
          from pathlib import Path
          from os import environ
          from subprocess import check_output

          # unless otherwise specified, commits are uploaded to the dev label
          # e.g., `main` branch commits
          envs = {"ANACONDA_ORG_LABEL": "dev"}

          if "${{ github.ref_name }}".startswith("feature/"):
              # feature branch commits are uploaded to a custom label
              envs["ANACONDA_ORG_LABEL"] = "${{ github.ref_name }}"
          elif re.match(r"\d+(\.\d+)+\.x", "${{ github.ref_name }}"):
              # release branch commits are added to the rc label
              # see https://github.com/conda/infrastructure/issues/760
              _, name = "${{ github.repository }}".split("/")
              envs["ANACONDA_ORG_LABEL"] = f"rc-{name}-${{ github.ref_name }}"

              # if no releases have occurred on this branch yet then `git describe --tag`
              # will misleadingly produce a version number relative to the last release
              # and not relative to the current release branch, if this is the case we need
              # to override the version with a derivative of the branch name

              # override the version if `git describe --tag` does not start with the branch version
              last_release = check_output(["git", "describe", "--tag"], text=True).strip()
              prefix = "${{ github.ref_name }}"[:-1]  # without x suffix
              if not last_release.startswith(prefix):
                  envs["VERSION_OVERRIDE"] = f"{prefix}0"

          Path(environ["GITHUB_ENV"]).write_text("\n".join(f"{name}={value}" for name, value in envs.items()))

      - name: Create & Upload
        uses: conda/actions/canary-release@f05161c6e6e37a49b17c8e0b436197b53830318a # v25.9.2
        env:
          # Run conda-build in isolated activation to properly package conda
          _CONDA_BUILD_ISOLATED_ACTIVATION: 1
        with:
          package-name: ${{ github.event.repository.name }}
          subdir: ${{ matrix.subdir }}
          anaconda-org-channel: conda-canary
          anaconda-org-label: ${{ env.ANACONDA_ORG_LABEL }}
          anaconda-org-token: ${{ secrets.ANACONDA_ORG_CONDA_CANARY_TOKEN }}

  # check conda-build imports
  downstream:
    # only run test suite if there are code changes
    needs: changes
    if: needs.changes.outputs.code == 'true'

    runs-on: ubuntu-latest
    defaults:
      run:
        # https://github.com/conda-incubator/setup-miniconda#use-a-default-shell
        shell: bash -el {0}  # bash exit immediately on error + login shell
    strategy:
      fail-fast: false
      matrix:
        # check missing imports in one representative environment
        python-version: ['3.13']
        default-channel: [defaults]

    steps:
      - name: Checkout conda/conda
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          repository: conda/conda
          path: conda

      - name: Checkout conda/conda-build
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          repository: conda/conda-build
          path: conda-build

      - name: Hash + Timestamp + Job
        run: echo "HASH=${{ runner.os }}-${{ runner.arch }}-Py${{ matrix.python-version }}-${{ matrix.default-channel }}-${{ github.job }}-$(date -u "+%Y%m")" >> $GITHUB_ENV

      - name: Cache Conda
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/conda_pkgs_dir
          key: cache-${{ env.HASH }}

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@835234971496cad1653abb28a638a281cf32541f # v3.2.0
        with:
          condarc-file: conda/.github/condarc-${{ matrix.default-channel }}
          run-post: false  # skip post cleanup

      - name: Conda Install
        working-directory: conda
        run: >
          conda install
          --yes
          --file tests/requirements.txt
          --file tests/requirements-${{ runner.os }}.txt
          --file tests/requirements-ci.txt
          --file tests/requirements-s3.txt
          --file ../conda-build/tests/requirements.txt
          --file ../conda-build/tests/requirements-ci.txt
          --file ../conda-build/tests/requirements-${{ runner.os }}.txt
          python=${{ matrix.python-version }}

      - name: Install conda, conda-build source code
        env:
          PIP_NO_BUILD_ISOLATION: '1'
        run: |
          python -m pip install -e conda -e conda-build -v --no-deps

      - name: Conda Info
        run: python -m conda info --verbose

      - name: Conda Config
        run: python -m conda config --show-sources

      - name: Conda List
        run: python -m conda list --show-channel-urls

      - name: Check correct conda, conda-build installed
        run: python -c "import conda, conda_build; print(conda.__file__, conda_build.__file__)"

      - name: Check conda-build tests for missing imports
        working-directory: conda-build
        # This test looks for ImportError, not warnings-promoted-to-error. The
        # inline script removes the filterwarnings section from pyproject.toml.
        # I wasn't able to find a pytest command line argument to do the same.
        run: |
          python -c "import re, sys, pathlib; pyproject = pathlib.Path('pyproject.toml'); pyproject.write_text(re.sub('(filterwarnings.*?])', '', pyproject.read_text(), flags=re.MULTILINE | re.DOTALL))"
          python -m pytest --collect-only
